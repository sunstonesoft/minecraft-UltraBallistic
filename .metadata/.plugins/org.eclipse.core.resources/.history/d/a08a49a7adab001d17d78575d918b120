package com.sunstonesoft.mc.UltraBallistic;



import net.milkbowl.vault.economy.Economy;
import net.milkbowl.vault.economy.EconomyResponse;

import com.palmergames.bukkit.towny.exceptions.NotRegisteredException;
import com.palmergames.bukkit.towny.object.Resident;
import com.palmergames.bukkit.towny.object.Town;
import com.palmergames.bukkit.towny.object.Nation;

import java.util.Random;

import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.plugin.RegisteredServiceProvider;



public final class main extends JavaPlugin {

    private static Economy econ = null;
	
	
	@Override
    public void onEnable() {
		if (!setupEconomy() ) {
			getLogger().severe(String.format("[%s] - Disabled due to no Vault dependency found!", getDescription().getName()));
            getServer().getPluginManager().disablePlugin(this);
            return;
        }
        getLogger().info("Ballistic missiles are ready!");
    }
	
	
	
	
	private boolean setupEconomy() {
        if (getServer().getPluginManager().getPlugin("Vault") == null) {
            return false;
        }
        RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
        if (rsp == null) {
            return false;
        }
        econ = rsp.getProvider();
        return econ != null;
    }
	
	public Boolean launchRocket(Location startloc, World world, Player player, int id) {

		int x = (int) getConfig().get(String.format("inflight.%s.loc.x"));
		int y = (int) getConfig().get(String.format("inflight.%s.loc.y"));
		int z = (int) getConfig().get(String.format("inflight.%s.loc.z"));
		Location loc = new Location(world, x, y ,z);
		Location landLoc = new Location(world, x, world.getHighestBlockYAt(startloc) ,z);
		
		world.spawnParticle(Particle.SMOKE_NORMAL, loc, 2);
		
		if (loc == landLoc) {
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			world.createExplosion(landLoc, 15, true);
			player.sendMessage("Rocket blow up!");
			return true;
		}
		else {
			getConfig().set(String.format("inflight.%s.loc.y",id), y - 1);
			saveConfig();
			return false;
		}
		
	}
	
	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
		if (cmd.getName().equalsIgnoreCase("rockets")) { // If the player typed /basic then do the following, note: If you only registered this executor for one command, you don't need this
			if (!(sender instanceof Player)) {
				sender.sendMessage("This command can only be run by a player.");
			} else {
				Player player = (Player) sender;
				int rockets = (int) getConfig().get(String.format("rockets.%s.ballistic", player.getUniqueId().toString()), 0);
				
				sender.sendMessage(String.format("You have %s rockets!", rockets));
			}
			return true;
		}
		if (cmd.getName().equalsIgnoreCase("buy_rocket")) { // If the player typed /basic then do the following, note: If you only registered this executor for one command, you don't need this
			if (!(sender instanceof Player)) {
				sender.sendMessage("This command can only be run by a player.");
			} else {
				Player player = (Player) sender;
//				Resident resident = new Resident(player.getName());
//				if (resident.hasTown()){
//				    try {
//						Town town = resident.getTown();
//						Nation nation = town.getNationOrNull();
//						if (!(nation==null)) {
//							if (nation.getKing() == resident) {
//								// making shit with declaring war
//								
//							}
//						}
//					} catch (NotRegisteredException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//				}
				
				
				
				EconomyResponse r = econ.withdrawPlayer(player, (double) getConfig().get("cost.ballistic",100000.00));
						
				if(r.transactionSuccess()) {
					
					int rockets = (int) getConfig().get(String.format("rockets.%s.ballistic", player.getUniqueId().toString()), 0);
					
					rockets = rockets + 1;
					
					
					
					getConfig().set(String.format("rockets.%s.ballistic", player.getUniqueId().toString()), rockets);
					saveConfig();
					player.sendMessage(String.format("You succesfully bought 1 rocket. Now you have %s airstrikes and your balance is %s!", rockets, econ.format(r.balance)));
				}
				else
				{
						sender.sendMessage(String.format("An error occured: %s", r.errorMessage));
				}
				
				
			}
			return true;
		}
		if (cmd.getName().equalsIgnoreCase("buy_airstrike")) { // If the player typed /basic then do the following, note: If you only registered this executor for one command, you don't need this
			if (!(sender instanceof Player)) {
				sender.sendMessage("This command can only be run by a player.");
			} else {
				Player player = (Player) sender;
//				Resident resident = new Resident(player.getName());
//				if (resident.hasTown()){
//				    try {
//						Town town = resident.getTown();
//						Nation nation = town.getNationOrNull();
//						if (!(nation==null)) {
//							if (nation.getKing() == resident) {
//								// making shit with declaring war
//								
//							}
//						}
//					} catch (NotRegisteredException e) {
//						// TODO Auto-generated catch block
//						e.printStackTrace();
//					}
//				}
				
				
				
				EconomyResponse r = econ.withdrawPlayer(player, (double) getConfig().get("cost.airstrike",500000.00));
						
				if(r.transactionSuccess()) {
					
					int airstrike = (int) getConfig().get(String.format("rockets.%s.airstrike", player.getUniqueId().toString()), 0);
					
					airstrike = airstrike + 1;
					
					
					
					getConfig().set(String.format("rockets.%s.airstrike", player.getUniqueId().toString()), airstrike);
					saveConfig();
					player.sendMessage(String.format("You succesfully bought 1 airstrike. Now you have %s airstrikes and your balance is %s!", airstrike, econ.format(r.balance)));
				}
				else
				{
						sender.sendMessage(String.format("An error occured: %s", r.errorMessage));
				}
				
				
			}
			return true;
		}
		
		
		if (cmd.getName().equalsIgnoreCase("launch_rocket")) { // If the player typed /basic then do the following, note: If you only registered this executor for one command, you don't need this
			if (!(sender instanceof Player)) {
				sender.sendMessage("This command can only be run by a player.");
			} else {
				final Player player = (Player) sender;
				
				if (args.length > 2) {
			        sender.sendMessage("Too many arguments!");
			        return false;
			    } 
			    if (args.length < 2) {
			        sender.sendMessage("Not enough arguments!");
			        return false;
			    }
			    
			    
				int rockets = (int) getConfig().get(String.format("rockets.%s.ballistic", player.getUniqueId().toString()), 0);
				
				if (rockets < 1) {
					player.sendMessage("You don't have enough rockets!");
					return true;
				}
				
				rockets = rockets - 1;
				
				getConfig().set(String.format("rockets.%s.ballistic", player.getUniqueId().toString()), rockets);
				saveConfig();
				
				
				int x = Integer.parseInt(args[0]);
				int z = Integer.parseInt(args[1]);
				final World world = player.getWorld();
		        int y = 255;
				final Location loc = new Location(world, x, y, z);
				Random rand = new Random();
				final int id = rand.nextInt(500000000);
				
				getConfig().set(String.format("inflight.%s", id), id);
				saveConfig();
				
				new BukkitRunnable() {
				    @Override
				    public void run() {
						Boolean ret = launchRocket(loc, world, player, id);
				    }
				}.runTaskTimer(this, 0, 20);

				return true;
				
			}
			return true;
		}
		//If this has happened the function will return true. 
	        // If this hasn't happened the value of false will be returned.
		return false; 
	}
}
